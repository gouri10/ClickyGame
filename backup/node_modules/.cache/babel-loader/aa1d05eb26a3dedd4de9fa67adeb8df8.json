{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gouri\\\\Desktop\\\\Assignments\\\\ClickyGame\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport breeds from \"./dogBreeds.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Header from \"./components/Header\";\nimport NavBar from \"./components/NavBar\";\nimport { Col, Row, Container } from \"./components/Grid\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      breeds,\n      score: 0,\n      topscore: 15\n    };\n\n    this.changeClickStatus = id => {\n      if (this.state.score === this.state.topscore && score !== 0) {\n        const breedClicked = this.state.breeds.filter(dog => dog.id === id)[0];\n\n        if (breedClicked.clicked !== true) {\n          breedClicked.clicked = true;\n          this.setState({\n            score: this.state.score + 1\n          });\n        } else {\n          alert(\"You lost the game\");\n          this.setState({\n            score: 0\n          });\n          console.log(this.state.breeds);\n          this.reset();\n        } // Set this.state.friends equal to the new friends array\n\n\n        this.setState({\n          breeds\n        });\n        this.shuffle(this.state.breeds);\n      } else {\n        alert(\"You won the game\");\n        this.setState({\n          score: 0\n        });\n        console.log(this.state.breeds);\n        this.reset();\n      }\n    };\n\n    this.reset = () => {\n      this.state.breeds.map(x => x.clicked = false);\n      this.setState({\n        breeds\n      });\n      console.log(\"AFTER \" + this.state.breeds);\n    };\n\n    this.shuffle = breeds => {\n      for (let i = breeds.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [breeds[j], breeds[i]];\n        breeds[i] = _ref[0];\n        breeds[j] = _ref[1];\n      }\n\n      this.setState({\n        breeds\n      });\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Header, {\n      imageType: \"Choose Your Breed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(NavBar, {\n      score: this.state.score,\n      topscore: this.state.topscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.breeds.map(breed => React.createElement(ImageCard, {\n      changeClickStatus: this.changeClickStatus,\n      id: breed.id,\n      name: breed.name,\n      image: breed.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/gouri/Desktop/Assignments/ClickyGame/client/src/App.js"],"names":["React","Component","ImageCard","breeds","Wrapper","Title","Header","NavBar","Col","Row","Container","App","state","score","topscore","changeClickStatus","id","breedClicked","filter","dog","clicked","setState","alert","console","log","reset","shuffle","map","x","i","length","j","Math","floor","random","render","breed","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport breeds from \"./dogBreeds.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Header from \"./components/Header\";\nimport NavBar from \"./components/NavBar\";\nimport { Col, Row, Container } from \"./components/Grid\";\n\nclass App extends Component {\n\n  // Setting this.state.friends to the friends json array\n  state = {\n    breeds,\n    score: 0,\n    topscore: 15\n  };\n\n  changeClickStatus = id => {\n    if (this.state.score === this.state.topscore && score!==0) {\n      const breedClicked = this.state.breeds.filter(dog => dog.id === id)[0];\n\n      if (breedClicked.clicked !== true) {\n        breedClicked.clicked = true;\n        this.setState({ score: this.state.score + 1 });\n      }\n      else {\n        alert(\"You lost the game\");\n        this.setState({ score: 0 });\n        console.log(this.state.breeds);\n        this.reset();\n      }\n      // Set this.state.friends equal to the new friends array\n      this.setState({ breeds });\n      this.shuffle(this.state.breeds);\n    }\n    else {\n      alert(\"You won the game\");\n      this.setState({ score: 0 });\n      console.log(this.state.breeds);\n      this.reset();\n    }\n  };\n\n  reset = () => {\n    this.state.breeds.map(x => x.clicked = false);\n    this.setState({ breeds });\n    console.log(\"AFTER \" + this.state.breeds);\n  };\n\n  shuffle = (breeds) => {\n    for (let i = breeds.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [breeds[i], breeds[j]] = [breeds[j], breeds[i]];\n    }\n    this.setState({ breeds });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Container>\n        <Header imageType=\"Choose Your Breed\" />\n        <NavBar score={this.state.score} topscore={this.state.topscore} />\n        <Wrapper>\n          {this.state.breeds.map(breed => (\n            <ImageCard\n              changeClickStatus={this.changeClickStatus}\n              id={breed.id}\n              name={breed.name}\n              image={breed.image}\n            />\n          ))}\n        </Wrapper>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}